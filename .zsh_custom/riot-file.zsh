#!/usr/bin/env bash
#
# riot-file Bash Completion
# =======================
#
# Bash completion support for the `riot-file` command,
# generated by [picocli](http://picocli.info/) version 4.3.2.
#
# Installation
# ------------
#
# 1. Source all completion scripts in your .bash_profile
#
#   cd $YOUR_APP_HOME/bin
#   for f in $(find . -name "*_completion"); do line=". $(pwd)/$f"; grep "$line" ~/.bash_profile || echo "$line" >> ~/.bash_profile; done
#
# 2. Open a new bash console, and type `riot-file [TAB][TAB]`
#
# 1a. Alternatively, if you have [bash-completion](https://github.com/scop/bash-completion) installed:
#     Place this file in a `bash-completion.d` folder:
#
#   * /etc/bash-completion.d
#   * /usr/local/etc/bash-completion.d
#   * ~/bash-completion.d
#
# Documentation
# -------------
# The script is called by bash whenever [TAB] or [TAB][TAB] is pressed after
# 'riot-file (..)'. By reading entered command line parameters,
# it determines possible bash completions and writes them to the COMPREPLY variable.
# Bash then completes the user input if only one entry is listed in the variable or
# shows the options if more than one is listed in COMPREPLY.
#
# References
# ----------
# [1] http://stackoverflow.com/a/12495480/1440785
# [2] http://tiswww.case.edu/php/chet/bash/FAQ
# [3] https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html
# [4] http://zsh.sourceforge.net/Doc/Release/Options.html#index-COMPLETE_005fALIASES
# [5] https://stackoverflow.com/questions/17042057/bash-check-element-in-array-for-elements-in-another-array/17042655#17042655
# [6] https://www.gnu.org/software/bash/manual/html_node/Programmable-Completion.html#Programmable-Completion
# [7] https://stackoverflow.com/questions/3249432/can-a-bash-tab-completion-script-be-used-in-zsh/27853970#27853970
#

if [ -n "$BASH_VERSION" ]; then
  # Enable programmable completion facilities when using bash (see [3])
  shopt -s progcomp
elif [ -n "$ZSH_VERSION" ]; then
  # Make alias a distinct command for completion purposes when using zsh (see [4])
  setopt COMPLETE_ALIASES
  alias compopt=complete

  # Enable bash completion in zsh (see [7])
  autoload -U +X compinit && compinit
  autoload -U +X bashcompinit && bashcompinit
fi

# CompWordsContainsArray takes an array and then checks
# if all elements of this array are in the global COMP_WORDS array.
#
# Returns zero (no error) if all elements of the array are in the COMP_WORDS array,
# otherwise returns 1 (error).
function CompWordsContainsArray() {
  declare -a localArray
  localArray=("$@")
  local findme
  for findme in "${localArray[@]}"; do
    if ElementNotInCompWords "$findme"; then return 1; fi
  done
  return 0
}
function ElementNotInCompWords() {
  local findme="$1"
  local element
  for element in "${COMP_WORDS[@]}"; do
    if [[ "$findme" = "$element" ]]; then return 1; fi
  done
  return 0
}

# The `currentPositionalIndex` function calculates the index of the current positional parameter.
#
# currentPositionalIndex takes three parameters:
# the command name,
# a space-separated string with the names of options that take a parameter, and
# a space-separated string with the names of boolean options (that don't take any params).
# When done, this function echos the current positional index to std_out.
#
# Example usage:
# local currIndex=$(currentPositionalIndex "mysubcommand" "$ARG_OPTS" "$FLAG_OPTS")
function currentPositionalIndex() {
  local commandName="$1"
  local optionsWithArgs="$2"
  local booleanOptions="$3"
  local previousWord
  local result=0

  for i in $(seq $((COMP_CWORD - 1)) -1 0); do
    previousWord=${COMP_WORDS[i]}
    if [ "${previousWord}" = "$commandName" ]; then
      break
    fi
    if [[ "${optionsWithArgs}" =~ ${previousWord} ]]; then
      ((result-=2)) # Arg option and its value not counted as positional param
    elif [[ "${booleanOptions}" =~ ${previousWord} ]]; then
      ((result-=1)) # Flag option itself not counted as positional param
    fi
    ((result++))
  done
  echo "$result"
}

# Bash completion entry point function.
# _complete_riot-file finds which commands and subcommands have been specified
# on the command line and delegates to the appropriate function
# to generate possible options and subcommands for the last specified subcommand.
function _complete_riot-file() {
  local cmds0=(import)
  local cmds1=(i)
  local cmds2=(export)
  local cmds3=(e)

  if CompWordsContainsArray "${cmds3[@]}"; then _picocli_riot-file_e; return $?; fi
  if CompWordsContainsArray "${cmds2[@]}"; then _picocli_riot-file_export; return $?; fi
  if CompWordsContainsArray "${cmds1[@]}"; then _picocli_riot-file_i; return $?; fi
  if CompWordsContainsArray "${cmds0[@]}"; then _picocli_riot-file_import; return $?; fi

  # No subcommands were specified; generate completions for the top-level command.
  _picocli_riot-file; return $?;
}

# Generates completions for the options and subcommands of the `riot-file` command.
function _picocli_riot-file() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands="generate-completion import i export e"
  local flag_opts="-q --quiet -d --debug -i --info -c --cluster -m --metrics -h --help -V --version"
  local arg_opts="-r --redis -p --pool"

  compopt +o default

  case ${prev_word} in
    -r|--redis)
      return
      ;;
    -p|--pool)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `import` subcommand.
function _picocli_riot-file_import() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--help --remove-fields --xadd-trim --nosave --partial --replace --sug-incr -z --gzip -h --header"
  local arg_opts="--threads -b --batch --max --progress-refresh --spel --spel-var --date-format --command --key-separator -p --keyspace -k --keys --member-space --members --eval-sha --eval-args --eval-output --lon --lat --score --score-default --string-format --string-raw --ttl-default --ttl --xadd-id --xadd-maxlen --xml-root -i --index --payload --if-condition --language --sug-field -t --filetype --s3-access --s3-secret --s3-region --fields --encoding --delimiter --skip --include --ranges -q --quote --regex"
  local name_option_args="EVALSHA EXPIRE GEOADD FTADD FTSEARCH FTAGGREGATE FTSUGADD HMSET LPUSH NOOP RPUSH SADD SET XADD ZADD" # --command values
  local type_option_args="BOOLEAN INTEGER MULTI STATUS VALUE" # --eval-output values
  local fmt_option_args="RAW XML JSON" # --string-format values
  local string_option_args="Arabic Danish Dutch English Finnish French German Hungarian Italian Norwegian Portuguese Romanian Russian Spanish Swedish Tamil Turkish Chinese" # --language values
  local type_option_args="DELIMITED FIXED JSON XML" # --filetype values

  compopt +o default

  case ${prev_word} in
    --threads)
      return
      ;;
    -b|--batch)
      return
      ;;
    --max)
      return
      ;;
    --progress-refresh)
      return
      ;;
    --spel)
      return
      ;;
    --spel-var)
      return
      ;;
    --date-format)
      return
      ;;
    --command)
      COMPREPLY=( $( compgen -W "${name_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --key-separator)
      return
      ;;
    -p|--keyspace)
      return
      ;;
    -k|--keys)
      return
      ;;
    --member-space)
      return
      ;;
    --members)
      return
      ;;
    --eval-sha)
      return
      ;;
    --eval-args)
      return
      ;;
    --eval-output)
      COMPREPLY=( $( compgen -W "${type_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --lon)
      return
      ;;
    --lat)
      return
      ;;
    --score)
      return
      ;;
    --score-default)
      return
      ;;
    --string-format)
      COMPREPLY=( $( compgen -W "${fmt_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --string-raw)
      return
      ;;
    --ttl-default)
      return
      ;;
    --ttl)
      return
      ;;
    --xadd-id)
      return
      ;;
    --xadd-maxlen)
      return
      ;;
    --xml-root)
      return
      ;;
    -i|--index)
      return
      ;;
    --payload)
      return
      ;;
    --if-condition)
      return
      ;;
    --language)
      COMPREPLY=( $( compgen -W "${string_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --sug-field)
      return
      ;;
    -t|--filetype)
      COMPREPLY=( $( compgen -W "${type_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --s3-access)
      return
      ;;
    --s3-secret)
      return
      ;;
    --s3-region)
      return
      ;;
    --fields)
      return
      ;;
    --encoding)
      return
      ;;
    --delimiter)
      return
      ;;
    --skip)
      return
      ;;
    --include)
      return
      ;;
    --ranges)
      return
      ;;
    -q|--quote)
      return
      ;;
    --regex)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `i` subcommand.
function _picocli_riot-file_i() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--help --remove-fields --xadd-trim --nosave --partial --replace --sug-incr -z --gzip -h --header"
  local arg_opts="--threads -b --batch --max --progress-refresh --spel --spel-var --date-format --command --key-separator -p --keyspace -k --keys --member-space --members --eval-sha --eval-args --eval-output --lon --lat --score --score-default --string-format --string-raw --ttl-default --ttl --xadd-id --xadd-maxlen --xml-root -i --index --payload --if-condition --language --sug-field -t --filetype --s3-access --s3-secret --s3-region --fields --encoding --delimiter --skip --include --ranges -q --quote --regex"
  local name_option_args="EVALSHA EXPIRE GEOADD FTADD FTSEARCH FTAGGREGATE FTSUGADD HMSET LPUSH NOOP RPUSH SADD SET XADD ZADD" # --command values
  local type_option_args="BOOLEAN INTEGER MULTI STATUS VALUE" # --eval-output values
  local fmt_option_args="RAW XML JSON" # --string-format values
  local string_option_args="Arabic Danish Dutch English Finnish French German Hungarian Italian Norwegian Portuguese Romanian Russian Spanish Swedish Tamil Turkish Chinese" # --language values
  local type_option_args="DELIMITED FIXED JSON XML" # --filetype values

  compopt +o default

  case ${prev_word} in
    --threads)
      return
      ;;
    -b|--batch)
      return
      ;;
    --max)
      return
      ;;
    --progress-refresh)
      return
      ;;
    --spel)
      return
      ;;
    --spel-var)
      return
      ;;
    --date-format)
      return
      ;;
    --command)
      COMPREPLY=( $( compgen -W "${name_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --key-separator)
      return
      ;;
    -p|--keyspace)
      return
      ;;
    -k|--keys)
      return
      ;;
    --member-space)
      return
      ;;
    --members)
      return
      ;;
    --eval-sha)
      return
      ;;
    --eval-args)
      return
      ;;
    --eval-output)
      COMPREPLY=( $( compgen -W "${type_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --lon)
      return
      ;;
    --lat)
      return
      ;;
    --score)
      return
      ;;
    --score-default)
      return
      ;;
    --string-format)
      COMPREPLY=( $( compgen -W "${fmt_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --string-raw)
      return
      ;;
    --ttl-default)
      return
      ;;
    --ttl)
      return
      ;;
    --xadd-id)
      return
      ;;
    --xadd-maxlen)
      return
      ;;
    --xml-root)
      return
      ;;
    -i|--index)
      return
      ;;
    --payload)
      return
      ;;
    --if-condition)
      return
      ;;
    --language)
      COMPREPLY=( $( compgen -W "${string_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --sug-field)
      return
      ;;
    -t|--filetype)
      COMPREPLY=( $( compgen -W "${type_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --s3-access)
      return
      ;;
    --s3-secret)
      return
      ;;
    --s3-region)
      return
      ;;
    --fields)
      return
      ;;
    --encoding)
      return
      ;;
    --delimiter)
      return
      ;;
    --skip)
      return
      ;;
    --include)
      return
      ;;
    --ranges)
      return
      ;;
    -q|--quote)
      return
      ;;
    --regex)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `export` subcommand.
function _picocli_riot-file_export() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--help -z --gzip -h --header --append"
  local arg_opts="--threads -b --batch --max --progress-refresh --count --match --reader-batch --key-regex -t --filetype --s3-access --s3-secret --s3-region --fields --encoding --delimiter --line-sep --format --locale --max-length --min-length --root"
  local type_option_args="DELIMITED FIXED JSON XML" # --filetype values

  compopt +o default

  case ${prev_word} in
    --threads)
      return
      ;;
    -b|--batch)
      return
      ;;
    --max)
      return
      ;;
    --progress-refresh)
      return
      ;;
    --count)
      return
      ;;
    --match)
      return
      ;;
    --reader-batch)
      return
      ;;
    --key-regex)
      return
      ;;
    -t|--filetype)
      COMPREPLY=( $( compgen -W "${type_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --s3-access)
      return
      ;;
    --s3-secret)
      return
      ;;
    --s3-region)
      return
      ;;
    --fields)
      return
      ;;
    --encoding)
      return
      ;;
    --delimiter)
      return
      ;;
    --line-sep)
      return
      ;;
    --format)
      return
      ;;
    --locale)
      return
      ;;
    --max-length)
      return
      ;;
    --min-length)
      return
      ;;
    --root)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Generates completions for the options and subcommands of the `e` subcommand.
function _picocli_riot-file_e() {
  # Get completion data
  local curr_word=${COMP_WORDS[COMP_CWORD]}
  local prev_word=${COMP_WORDS[COMP_CWORD-1]}

  local commands=""
  local flag_opts="--help -z --gzip -h --header --append"
  local arg_opts="--threads -b --batch --max --progress-refresh --count --match --reader-batch --key-regex -t --filetype --s3-access --s3-secret --s3-region --fields --encoding --delimiter --line-sep --format --locale --max-length --min-length --root"
  local type_option_args="DELIMITED FIXED JSON XML" # --filetype values

  compopt +o default

  case ${prev_word} in
    --threads)
      return
      ;;
    -b|--batch)
      return
      ;;
    --max)
      return
      ;;
    --progress-refresh)
      return
      ;;
    --count)
      return
      ;;
    --match)
      return
      ;;
    --reader-batch)
      return
      ;;
    --key-regex)
      return
      ;;
    -t|--filetype)
      COMPREPLY=( $( compgen -W "${type_option_args}" -- "${curr_word}" ) )
      return $?
      ;;
    --s3-access)
      return
      ;;
    --s3-secret)
      return
      ;;
    --s3-region)
      return
      ;;
    --fields)
      return
      ;;
    --encoding)
      return
      ;;
    --delimiter)
      return
      ;;
    --line-sep)
      return
      ;;
    --format)
      return
      ;;
    --locale)
      return
      ;;
    --max-length)
      return
      ;;
    --min-length)
      return
      ;;
    --root)
      return
      ;;
  esac

  if [[ "${curr_word}" == -* ]]; then
    COMPREPLY=( $(compgen -W "${flag_opts} ${arg_opts}" -- "${curr_word}") )
  else
    local positionals=""
    COMPREPLY=( $(compgen -W "${commands} ${positionals}" -- "${curr_word}") )
  fi
}

# Define a completion specification (a compspec) for the
# `riot-file`, `riot-file.sh`, and `riot-file.bash` commands.
# Uses the bash `complete` builtin (see [6]) to specify that shell function
# `_complete_riot-file` is responsible for generating possible completions for the
# current word on the command line.
# The `-o default` option means that if the function generated no matches, the
# default Bash completions and the Readline default filename completions are performed.
complete -F _complete_riot-file -o default riot-file riot-file.sh riot-file.bash

